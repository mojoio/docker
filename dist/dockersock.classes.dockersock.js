"use strict";
require("typings-global");
var plugins = require("./dockersock.plugins");
var Dockersock = (function () {
    function Dockersock(pathArg) {
        if (pathArg === void 0) { pathArg = "http://unix:/var/run/docker.sock:"; }
        this.sockPath = pathArg;
    }
    // methods
    Dockersock.prototype.auth = function (userArg, passArg) {
        var done = plugins.q.defer();
        this.request("POST", "");
        return done.promise;
    };
    Dockersock.prototype.listContainers = function () {
        var done = plugins.q.defer();
        this.request("GET", "/containers")
            .then(done.resolve);
        return done.promise;
    };
    ;
    Dockersock.prototype.listContainersDetailed = function () {
        var _this = this;
        var done = plugins.q.defer();
        var detailedDataObject = [];
        this.listContainers()
            .then(function (dataArg) {
            var recursiveCounter = 0;
            var makeDetailed = function () {
                if (typeof dataArg[recursiveCounter] != "undefined") {
                    _this.request("GET", "/containers/" + dataArg[recursiveCounter].Id)
                        .then(function (dataArg2) {
                        detailedDataObject.push(dataArg2);
                        recursiveCounter++;
                        // recursive call
                        makeDetailed();
                    });
                }
                else {
                    done.resolve(detailedDataObject);
                }
            };
            makeDetailed();
        });
        return done.promise;
    };
    ;
    Dockersock.prototype.listContainersRunning = function () {
        var done = plugins.q.defer();
        return done.promise;
    };
    Dockersock.prototype.listContainersStopped = function () {
        var done = plugins.q.defer();
        return done.promise;
    };
    Dockersock.prototype.listImages = function () {
        return this.request("GET", "/images", "?all=true");
    };
    Dockersock.prototype.listImagesDangling = function () {
        return this.request("GET", "/images", "?dangling=true");
    };
    Dockersock.prototype.pullImage = function (imageLabel) {
        return this.requestStream("POST", "/images/create?fromImage=" + imageLabel);
    };
    ;
    Dockersock.prototype.createContainer = function (optionsArg, pullFirstArg) {
        var _this = this;
        if (pullFirstArg === void 0) { pullFirstArg = true; }
        var done = plugins.q.defer();
        var create = function () {
            return _this.request("POST", "/containers/create", "", optionsArg);
        };
        if (pullFirstArg) {
            this.pullImage(optionsArg.Image)
                .then(create)
                .then(done.resolve);
        }
        else {
            create()
                .then(done.resolve);
        }
        return done.promise;
    };
    ;
    Dockersock.prototype.getContainerId = function () {
    };
    ;
    Dockersock.prototype.startContainer = function (containerNameArg) {
        return this.request("POST", "/containers/" + containerNameArg + "/start");
    };
    ;
    Dockersock.prototype.stopContainer = function (containerNameArg) {
        return this.request("POST", "/containers/" + containerNameArg + "/stop");
    };
    ;
    Dockersock.prototype.removeContainer = function (containerNameArg) {
        return this.request("DELETE", "/containers/" + containerNameArg + "?v=1");
    };
    ;
    Dockersock.prototype.clean = function () {
        var done = plugins.q.defer();
        return done.promise;
    };
    ;
    Dockersock.prototype.callOnChange = function (cb) {
        var cbPromise;
        var changeBuffered = false; // when cb is running then buffer any consequent change
        var requestStream = plugins.request.get(this.sockPath + "/events");
        requestStream.on("response", function (response) {
            if (response.statusCode == 200) {
                plugins.beautylog.ok("request returned status 200, so we are good!");
            }
            else {
                plugins.beautylog.error("request returned error: " + response.statusCode);
            }
        });
        requestStream.on("data", function (data) {
            var status = JSON.parse(data.toString()).status;
            plugins.beautylog.logReduced(status);
            if (typeof cbPromise == "undefined" || cbPromise.state == "pending") {
                cbPromise = cb();
            }
            else if (changeBuffered) {
                changeBuffered = true;
                cbPromise.then(function () {
                    changeBuffered = false;
                    cbPromise = cb();
                });
            }
        });
        requestStream.on("end", function () {
        });
    };
    ;
    Dockersock.prototype.request = function (methodArg, routeArg, queryArg, dataArg) {
        if (queryArg === void 0) { queryArg = ""; }
        if (dataArg === void 0) { dataArg = {}; }
        var done = plugins.q.defer();
        var jsonArg = JSON.stringify(dataArg);
        var suffix = "";
        if (methodArg == "GET")
            suffix = "/json";
        var options = {
            method: methodArg,
            url: this.sockPath + routeArg + suffix + queryArg,
            headers: {
                "Content-Type": "application/json"
            },
            body: jsonArg
        };
        plugins.request(options, function (err, res, body) {
            if (!err && res.statusCode == 200) {
                var responseObj = JSON.parse(body);
                done.resolve(responseObj);
            }
            else {
                console.log(err);
                console.log(res);
                done.reject(err);
            }
            ;
        });
        return done.promise;
    };
    Dockersock.prototype.requestStream = function (methodArg, routeArg, endArg) {
        if (endArg === void 0) { endArg = true; }
        var done = plugins.q.defer();
        if (methodArg == "POST") {
            var requestStream = plugins.request.post(this.sockPath + routeArg);
            requestStream.on("response", function (response) {
                if (response.statusCode == 200) {
                    plugins.beautylog.ok("request returned status 200, so we are good!");
                }
                else {
                    plugins.beautylog.error("request returned error: " + response.statusCode);
                    done.reject();
                }
            });
            requestStream.on("data", function (data) {
                var status = JSON.parse(data.toString()).status;
                plugins.beautylog.logReduced(status);
            });
            requestStream.on("end", function () {
                done.resolve();
            });
        }
        return done.promise;
    };
    return Dockersock;
}());
exports.Dockersock = Dockersock;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
